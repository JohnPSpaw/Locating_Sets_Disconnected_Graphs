def locating_sets_num(A,G):           #Finds locating sets for a graph G with a vertex set A

    def make_unique(original_list):
        unique_list = []
        [unique_list.append(obj) for obj in original_list if obj not in unique_list]
        return unique_list
    
    for i in range(1,len(A)+1):
        #print(' ')
        #print('Checking combinations of '+str(i)+' vertices')
        #print('**********************************************')
        combs=Combinations(A,i)
        
        locating_number=0                #Start at 0 by default
        locating_sets=[]                 #Contains all CONFIRMED locating sets
        for k in combs:                    #For each combination of vertices
            #print(' ')
            #print('Checking the vertex set '+str(k)+' as a potential locating set')
            loc_set=[j for j in k]         #Array containing vertices from the locating set
            dist=[]                        #Array to hold all of the locating codes
            for vertex in G:
                code=[]
                for h in loc_set:
                    code.append(G.distance(vertex,h))
                #print('The locating code for '+str(vertex)+' is '+str(code))
                dist.append(code)
            #print('The set of locating codes for this vertex set is '+str(dist))
            code_count=len(dist)
            duplicates=0
            #print('Checking for uniqueness of locating codes')
            for i in range(len(dist)):
                for j in range(len(dist)):
                    if j != i:
                        if dist[j] == dist [i]:
                            duplicates = duplicates + 1
                            #print('Duplicate found')
                            #print(str(dist[j])+' is a duplicate')
            if code_count-duplicates == code_count:
                locating_sets.append(k)
            locating_sets = make_unique(locating_sets)
        if len(locating_sets) != 0:    
            print('The following are locating sets: '+str(locating_sets))
        if len(locating_sets) != 0:   
            min_len = len(A)
            for l in locating_sets:
                if len(l) < min_len:
                    min_len = len(l)
            print('The locating number is '+str(min_len))
        if len(locating_sets) != 0:
            break